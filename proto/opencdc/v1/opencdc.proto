syntax = "proto3";

package opencdc.v1;

import "google/protobuf/descriptor.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/conduitio/conduit-commons/proto/opencdc/v1";

option (opencdc_version) = "v1";

option (metadata_created_at) = "opencdc.createdAt";
option (metadata_read_at) = "opencdc.readAt";
option (metadata_version) = "opencdc.version";
option (metadata_collection) = "opencdc.collection";
option (metadata_schema_id) = "opencdc.schema.id";
option (metadata_schema_type) = "opencdc.schema.type";

// We are (ab)using custom file options to define constants.
// See https://github.com/protocolbuffers/protobuf/issues/3520#issuecomment-323613839
extend google.protobuf.FileOptions {
  // OpenCDC version is a constant that should be used as the value in the
  // metadata field opencdc.version. It ensures the OpenCDC format version can be
  // easily identified in case the record gets marshaled into a different untyped
  // format (e.g. JSON).
  string opencdc_version = 9999;

  // Metadata field "opencdc.version" contains the version of the OpenCDC format
  // (e.g. "v1"). This field exists to ensure the OpenCDC format version can be
  // easily identified in case the record gets marshaled into a different
  // untyped format (e.g. JSON).
  string metadata_version = 10000;
  // Metadata field "opencdc.createdAt" can contain the time when the record was
  // created in the 3rd party system. The expected format is a unix timestamp in
  // nanoseconds.
  string metadata_created_at = 10001;
  // Metadata field "opencdc.readAt" can contain the time when the record was
  // read from the 3rd party system. The expected format is a unix timestamp in
  // nanoseconds.
  string metadata_read_at = 10002;
  // Metadata field "opencdc.collection" can contain the name of the collection
  // where the record originated from and/or where it should be stored.
  string metadata_collection = 10003;
  // Metadata field "opencdc.schema.id" contains the ID of the schema of
  // the record's .Payload.After field.
  string metadata_schema_id = 10004;
  // Metadata field "opencdc.schema.type" contains the type of the schema of
  // the record's .Payload.After field (currently, the only supported value is "avro")
  string metadata_schema_type = 10005;
}

// Operation defines what triggered the creation of a record.
enum Operation {
  OPERATION_UNSPECIFIED = 0;
  // Records with operation create contain data of a newly created entity.
  OPERATION_CREATE = 1;
  // Records with operation update contain data of an updated entity.
  OPERATION_UPDATE = 2;
  // Records with operation delete contain data of a deleted entity.
  OPERATION_DELETE = 3;
  // Records with operation snapshot contain data of a previously existing
  // entity, fetched as part of a snapshot.
  OPERATION_SNAPSHOT = 4;
}

// Record contains data about a single change event related to a single entity.
message Record {
  // Position uniquely identifies the record.
  bytes position = 1;

  // Operation defines what triggered the creation of a record. There are four
  // possibilities: create, update, delete or snapshot. The first three
  // operations are encountered during normal CDC operation, while "snapshot" is
  // meant to represent records during an initial load. Depending on the
  // operation, the record will contain either the payload before the change,
  // after the change, or both (see field payload).
  Operation operation = 2;

  // Metadata contains optional information related to the record. Although the
  // map can contain arbitrary keys, the standard provides a set of standard
  // metadata fields (see options prefixed with metadata_*).
  map<string, string> metadata = 3;

  // Key represents a value that should identify the entity (e.g. database row).
  Data key = 4;
  // Payload holds the payload change (data before and after the operation
  // occurred).
  Change payload = 5;
}

// Change represents the data before and after the operation occurred.
message Change {
  // Before contains the data before the operation occurred. This field is
  // optional and should only be populated for operations "update" and "delete"
  // (if the system supports fetching the data before the operation).
  Data before = 1;
  // After contains the data after the operation occurred. This field should be
  // populated for all operations except "delete".
  Data after = 2;
}

// Data is used to represent the record key and payload. It can be either raw
// data (byte array) or structured data (struct).
message Data {
  oneof data {
    // Raw data contains unstructured data in form of a byte array.
    bytes raw_data = 1;
    // Structured data contains data in form of a struct with fields.
    google.protobuf.Struct structured_data = 2;
  }
}
